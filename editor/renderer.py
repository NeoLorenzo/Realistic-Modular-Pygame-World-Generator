# editor/renderer.py
"""
================================================================================
PYGAME WORLD RENDERER
================================================================================
This module provides a class to render the world data generated by the
WorldGenerator onto a Pygame surface for the Live Editor.
================================================================================
"""

import pygame
import logging
import numpy as np

from world_generator import color_maps

class WorldRenderer:
    """
    Handles the visualization of the world data on a Pygame screen for the
    Live Editor.
    """
    def __init__(self, logger: logging.Logger):
        """
        Initializes the renderer for Live Preview Mode.
        """
        self.logger = logger
        self.logger.info("WorldRenderer initializing in Live Preview mode...")

    def create_surface_from_color_array(self, color_array: np.ndarray) -> pygame.Surface:
        """
        Converts a NumPy color array into a Pygame surface.
        """
        return pygame.surfarray.make_surface(color_array)

    def draw_live_preview(self, screen: pygame.Surface, camera, preview_surface: pygame.Surface):
        """
        Draws the pre-generated live preview surface to the screen, scaling
        it according to the camera's pan and zoom.
        """
        screen.fill((10, 0, 20))
        if preview_surface is None:
            return

        # CORRECTED: Use the correct attribute names from the Camera class.
        scaled_width = max(1, int(camera.world_width * camera.zoom))
        scaled_height = max(1, int(camera.world_height * camera.zoom))

        scaled_surface = pygame.transform.scale(preview_surface, (scaled_width, scaled_height))
        top_left_pos = camera.world_to_screen(0, 0)
        screen.blit(scaled_surface, top_left_pos)