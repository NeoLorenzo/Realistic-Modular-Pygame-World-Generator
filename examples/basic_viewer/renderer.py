# world_generator/renderer.py

"""
================================================================================
PYGAME WORLD RENDERER
================================================================================
This module provides a class to render the world data generated by the
WorldGenerator onto a Pygame surface.

Data Contract:
---------------
- Inputs (on initialization):
    - generator (WorldGenerator): An initialized WorldGenerator instance.
    - config (dict): A dictionary of simulation parameters.
    - logger: A configured Python logging object.
- Inputs (on draw call):
    - screen (pygame.Surface): The target surface to draw on.
    - camera (Camera): An object that handles view transformations.
- Outputs: None.
- Side Effects: Draws pixels to the provided Pygame surface.
- Invariants: The visual output is a deterministic function of the generator's
  data and the camera's state.
================================================================================
"""

import pygame
import logging

# We use a type hint for the generator without creating a circular import
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from world_generator.generator import WorldGenerator

import numpy as np
from world_generator import config as DEFAULTS

# --- Default Color Mappings ---
# These are used by the renderer if no other color map is provided.
# Format: (R, G, B)
COLOR_MAP_TERRAIN = {
    "deep_water": (0, 0, 50),
    "shallow_water": (26, 102, 255),
    "sand": (240, 230, 140),
    "grass": (34, 139, 34),
    "dirt": (139, 69, 19),
    "mountain": (112, 128, 144)
}

COLOR_MAP_TEMPERATURE = {
    "coldest": (0, 0, 100),
    "cold": (0, 0, 255),
    "temperate": (255, 255, 0),
    "hot": (255, 0, 0),
    "hottest": (150, 0, 0)
}

COLOR_MAP_HUMIDITY = {
    "dry": (210, 180, 140),
    "wet": (70, 130, 180)
}


import threading
import queue

class WorldRenderer:
    """
    Handles the visualization of the world data on a Pygame screen.
    """
    def __init__(self, generator: 'WorldGenerator', logger: logging.Logger):
        """
        Initializes the renderer.
        """
        self.generator = generator
        self.logger = logger
        self.logger.info("WorldRenderer initializing...")

        # Load settings directly from the generator instance
        self.chunk_size = self.generator.settings['chunk_size_cm']
        self.chunk_resolution = DEFAULTS.CHUNK_RESOLUTION
        
        # Load all level and color data
        self.terrain_levels = DEFAULTS.TERRAIN_LEVELS
        self.temp_levels = DEFAULTS.TEMP_LEVELS
        self.color_maps = {
            "terrain": COLOR_MAP_TERRAIN,
            "temperature": COLOR_MAP_TEMPERATURE,
            "humidity": COLOR_MAP_HUMIDITY
        }
        
        # A multi-level cache for different view modes
        self.chunk_surface_cache = {
            "terrain": {},
            "temperature": {},
            "humidity": {}
        }
        self.placeholder_cache = {
            "terrain": {},
            "temperature": {},
            "humidity": {}
        }
        self.placeholder_resolution = DEFAULTS.PLACEHOLDER_RESOLUTION
        
        # --- Scaled Surface Cache for Memoization (Rule 8 & 11) ---
        self.scaled_surface_cache = {}
        self._last_camera_zoom = -1.0 # Used to detect zoom changes and invalidate the cache
        
        # --- Asynchronous Generation Setup (Rule 8) ---
        self.generation_request_queue = queue.Queue()
        self.generation_result_queue = queue.Queue()
        self.stop_event = threading.Event()
        self.worker_thread = threading.Thread(target=self._chunk_generator_worker)
        self.worker_thread.daemon = True
        self.worker_thread.start()
        self.pending_requests = set()

        self.logger.info("WorldRenderer initialized with background worker.")

    def _get_terrain_color_array(self, elevation_values: np.ndarray) -> np.ndarray:
        """Converts an array of elevation data into an RGB color array."""
        colors = np.zeros((*elevation_values.shape, 3), dtype=np.uint8)
        color_map = self.color_maps["terrain"]
        
        water_mask = elevation_values < self.terrain_levels["water"]
        sand_mask = (elevation_values >= self.terrain_levels["water"]) & (elevation_values < self.terrain_levels["sand"])
        grass_mask = (elevation_values >= self.terrain_levels["sand"]) & (elevation_values < self.terrain_levels["grass"])
        dirt_mask = (elevation_values >= self.terrain_levels["grass"]) & (elevation_values < self.terrain_levels["dirt"])
        mountain_mask = elevation_values >= self.terrain_levels["dirt"]

        if np.any(water_mask):
            t = (elevation_values[water_mask] / self.terrain_levels["water"])[..., np.newaxis]
            c1 = np.array(color_map["deep_water"])
            c2 = np.array(color_map["shallow_water"])
            colors[water_mask] = (1 - t) * c1 + t * c2
            
        colors[sand_mask] = color_map["sand"]
        colors[grass_mask] = color_map["grass"]
        colors[dirt_mask] = color_map["dirt"]
        colors[mountain_mask] = color_map["mountain"]
        
        return np.transpose(colors, (1, 0, 2))

    def _get_temperature_color_array(self, temp_values: np.ndarray) -> np.ndarray:
        """Converts an array of temperature data into an RGB color array."""
        colors = np.zeros((*temp_values.shape, 3), dtype=np.uint8)
        color_map = self.color_maps["temperature"]
        
        # Simple linear interpolation between color points
        t = temp_values[..., np.newaxis]
        colors[:] = np.select(
            [t < self.temp_levels["cold"], t < self.temp_levels["temperate"], t < self.temp_levels["hot"]],
            [
                (1 - t/self.temp_levels["cold"]) * np.array(color_map["coldest"]) + (t/self.temp_levels["cold"]) * np.array(color_map["cold"]),
                (1 - (t-self.temp_levels["cold"])/(self.temp_levels["temperate"]-self.temp_levels["cold"])) * np.array(color_map["cold"]) + ((t-self.temp_levels["cold"])/(self.temp_levels["temperate"]-self.temp_levels["cold"])) * np.array(color_map["temperate"]),
                (1 - (t-self.temp_levels["temperate"])/(self.temp_levels["hot"]-self.temp_levels["temperate"])) * np.array(color_map["temperate"]) + ((t-self.temp_levels["temperate"])/(self.temp_levels["hot"]-self.temp_levels["temperate"])) * np.array(color_map["hot"])
            ],
            default=(1 - (t-self.temp_levels["hot"])/(1.0-self.temp_levels["hot"])) * np.array(color_map["hot"]) + ((t-self.temp_levels["hot"])/(1.0-self.temp_levels["hot"])) * np.array(color_map["hottest"])
        )
        return np.transpose(colors, (1, 0, 2))

    def _get_humidity_color_array(self, humidity_values: np.ndarray) -> np.ndarray:
        """Converts an array of humidity data into an RGB color array."""
        colors = np.zeros((*humidity_values.shape, 3), dtype=np.uint8)
        color_map = self.color_maps["humidity"]
        t = humidity_values[..., np.newaxis]
        colors[:] = (1 - t) * np.array(color_map["dry"]) + t * np.array(color_map["wet"])
        return np.transpose(colors, (1, 0, 2))

    def _perform_chunk_generation(self, chunk_x: int, chunk_y: int, view_mode: str) -> pygame.Surface:
        """
        Performs the actual, CPU-intensive work of generating a chunk surface.
        This method is designed to be called by the background worker thread.
        """
        wx = np.linspace(chunk_x * self.chunk_size, (chunk_x + 1) * self.chunk_size, self.chunk_resolution)
        wy = np.linspace(chunk_y * self.chunk_size, (chunk_y + 1) * self.chunk_size, self.chunk_resolution)
        wx_grid, wy_grid = np.meshgrid(wx, wy)

        if view_mode == "terrain":
            data = self.generator.get_elevation(wx_grid, wy_grid)
            color_array = self._get_terrain_color_array(data)
        elif view_mode == "temperature":
            data = self.generator.get_temperature(wx_grid, wy_grid)
            color_array = self._get_temperature_color_array(data)
        else: # humidity
            data = self.generator.get_humidity(wx_grid, wy_grid)
            color_array = self._get_humidity_color_array(data)

        return pygame.surfarray.make_surface(color_array)

    def _chunk_generator_worker(self):
        """The target function for the background worker thread."""
        self.logger.info("Chunk generator worker thread started.")
        while not self.stop_event.is_set():
            try:
                # Wait for a request. Timeout allows the thread to check the stop_event.
                chunk_x, chunk_y, view_mode = self.generation_request_queue.get(timeout=0.1)
                
                # This is the same expensive logic as before, but on a background thread.
                surface = self._perform_chunk_generation(chunk_x, chunk_y, view_mode)
                
                # Put the result into the queue for the main thread to pick up.
                self.generation_result_queue.put(((chunk_x, chunk_y, view_mode), surface))

            except queue.Empty:
                continue # No requests, loop again.
        self.logger.info("Chunk generator worker thread stopped.")

    def _process_completed_chunks(self):
        """Checks the results queue and populates the cache. Runs on the main thread."""
        while not self.generation_result_queue.empty():
            (chunk_x, chunk_y, view_mode), surface = self.generation_result_queue.get()
            chunk_key = (chunk_x, chunk_y)
            self.chunk_surface_cache[view_mode][chunk_key] = surface
            # Remove from pending requests once it's in the cache
            if (chunk_x, chunk_y, view_mode) in self.pending_requests:
                self.pending_requests.remove((chunk_x, chunk_y, view_mode))

    def _request_chunk_surface(self, chunk_x: int, chunk_y: int, view_mode: str):
        """Adds a request to the generation queue if not already pending."""
        request_key = (chunk_x, chunk_y, view_mode)
        if request_key not in self.pending_requests:
            self.pending_requests.add(request_key)
            self.generation_request_queue.put(request_key)

    def shutdown(self):
        """Signals the worker thread to stop and waits for it to exit."""
        self.logger.info("Shutting down renderer worker thread...")
        self.stop_event.set()
        self.worker_thread.join()
        self.logger.info("Worker thread joined.")

    def _generate_placeholder_surface(self, chunk_x: int, chunk_y: int, view_mode: str) -> pygame.Surface:
        """
        Generates a very low-resolution placeholder surface synchronously.
        This is designed to be fast enough to run on the main thread without stuttering.
        """
        wx = np.linspace(chunk_x * self.chunk_size, (chunk_x + 1) * self.chunk_size, self.placeholder_resolution)
        wy = np.linspace(chunk_y * self.chunk_size, (chunk_y + 1) * self.chunk_size, self.placeholder_resolution)
        wx_grid, wy_grid = np.meshgrid(wx, wy)

        if view_mode == "terrain":
            data = self.generator.get_elevation(wx_grid, wy_grid)
            color_array = self._get_terrain_color_array(data)
        elif view_mode == "temperature":
            data = self.generator.get_temperature(wx_grid, wy_grid)
            color_array = self._get_temperature_color_array(data)
        else: # humidity
            data = self.generator.get_humidity(wx_grid, wy_grid)
            color_array = self._get_humidity_color_array(data)

        surface = pygame.surfarray.make_surface(color_array)
        # Cache the result so we only generate this once
        self.placeholder_cache[view_mode][(chunk_x, chunk_y)] = surface
        return surface

    def draw(self, screen: pygame.Surface, camera, view_mode: str):
        """Draws the visible portion of the world to the screen."""
        # First, process any chunks that the worker thread has finished.
        self._process_completed_chunks()

        screen.fill((10, 0, 20))

        world_width_chunks = self.generator.settings['world_width_chunks']
        world_height_chunks = self.generator.settings['world_height_chunks']

        top_left_wx, top_left_wy = camera.screen_to_world(0, 0)
        bottom_right_wx, bottom_right_wy = camera.screen_to_world(camera.screen_width, camera.screen_height)
        
        start_chunk_x = int(top_left_wx // self.chunk_size)
        end_chunk_x = int(bottom_right_wx // self.chunk_size)
        start_chunk_y = int(top_left_wy // self.chunk_size)
        end_chunk_y = int(bottom_right_wy // self.chunk_size)

        current_cache = self.chunk_surface_cache[view_mode]
        placeholder_cache = self.placeholder_cache[view_mode]

        for cx in range(start_chunk_x, end_chunk_x + 1):
            for cy in range(start_chunk_y, end_chunk_y + 1):
                if not (0 <= cx < world_width_chunks and 0 <= cy < world_height_chunks):
                    continue

                chunk_key = (cx, cy)
                original_surface = current_cache.get(chunk_key)
                surface_to_draw = original_surface

                if surface_to_draw is None:
                    # High-res surface isn't ready. Check for a placeholder.
                    surface_to_draw = placeholder_cache.get(chunk_key)
                    if surface_to_draw is None:
                        # No placeholder exists; generate one now and request the real one.
                        surface_to_draw = self._generate_placeholder_surface(cx, cy, view_mode)
                        self._request_chunk_surface(cx, cy, view_mode)
                
                # --- Unified Scaling and Drawing Logic (Rule 3, Rule 13) ---
                # This single, unified logic replaces the complex if/else block to correctly
                # render chunks at any zoom level, fixing the visual bug at zoom >= 1.0.

                # Calculate one scaled size for all chunks at the current zoom level.
                # This is an approximation but is crucial for effective caching.
                scaled_size = int(self.chunk_size * camera.zoom)
                if scaled_size < 1:
                    continue

                # --- Cache Invalidation ---
                # If zoom changes, the required scaled size changes, so the entire cache is invalid.
                if camera.zoom != self._last_camera_zoom:
                    self.scaled_surface_cache.clear()
                    self._last_camera_zoom = camera.zoom

                # --- Cache Lookup ---
                # The key is just the chunk's coordinate; the size is implicit from the zoom level.
                scaled_surface = self.scaled_surface_cache.get(chunk_key)

                if scaled_surface is None:
                    # Not in cache, so perform the expensive scale operation ONCE per chunk,
                    # per zoom level. This works correctly for both scaling up and down.
                    scaled_surface = pygame.transform.scale(surface_to_draw, (scaled_size, scaled_size))
                    self.scaled_surface_cache[chunk_key] = scaled_surface

                # --- Drawing ---
                # Calculate the on-screen position for this chunk and blit the cached,
                # correctly-sized surface.
                chunk_screen_pos = camera.world_to_screen(cx * self.chunk_size, cy * self.chunk_size)
                screen.blit(scaled_surface, chunk_screen_pos)